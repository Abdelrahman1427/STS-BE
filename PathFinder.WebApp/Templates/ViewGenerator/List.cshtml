@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@*@@model @Model.ViewDataTypeName*@

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}

    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
@:<div id="alert"></div>
@:
@:<custom-table add-modal-id="add-modal" add-url="Area/Controller/add" title="@@areaLocalizer["Controller"]" direct-url="/Home/Index">
@:    <br />
<!-- Search Filter -->
<div class="row filter-row">
    <div class="col-sm-6 col-md-3 col-lg-3 col-xl-2 col-12">
        <div class="form-group form-focus">
            <input id="Controller-name" type="text" class="form-control floating">
            <label class="focus-label">@@areaLocalizer["ControllerName"]</label>
        </div>
    </div>
    <div class="col-sm-6 col-md-3 col-lg-3 col-xl-2 col-12">
        <div class="form-group form-focus select-focus">
            <select id="Controller-status" class="select floating">
                <option selected value=""> -- @@coreResources["Select"] -- </option>
                <option value="false"> Inactive </option>
                <option value="true"> Active </option>
            </select>
            <label class="focus-label">@@coreResources["Status"]</label>
        </div>
    </div>
    <div class="col-sm-6 col-md-3 col-lg-3 col-xl-2 col-12">
        <a href="#" class="btn btn-success w-100 " id="search"> @@coreResources["Search"] </a>
    </div>
</div>
@:</custom-table>

<!-- Add Controller Modal -->
@:<custom-modal id="add-modal" action-url="Controller/Add" title="@@areaLocalizer["AddController"]">
   <!--<partial name="_AddController" model="new ControllerForCreationDTO()"></partial>-->
@:</custom-modal>

<!-- Update Controller Modal -->
@:<custom-modal id="update-modal" action-url="Controller/Update" title="@@areaLocalizer["UpdateController"]"></custom-modal>

<!-- /Delete Controller Modal -->
@:<form-modal id="delete-modal" action-name="@@coreResources["Delete"]" title="@@areaLocalizer["Controller"]" message="@@areaLocalizer["DeleteControllerMessage"]">
@:</form-modal>

@:@@section Scripts{
@:<script>
@:    $(document).ready(function () {

@:        var table = DrawDataTable('Area/Controller',

        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
        @:[ 'id',
        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
                @:'@@areaLocalizer["@GetValueExpression(property)"]',
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
                @:'@@areaLocalizer["@GetValueExpression(property)"]',
            }
        }
        @:],
        @:[ 'id',
        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
                @:'@ToCamelCase(GetValueExpression(property))',
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
                @:'@ToCamelCase(GetValueExpression(property))',
            }
        }
        @:]);
        @:$('#search').click(function (){
        @:    table.column(0).search($('#Controller-name').val());
        @:    table.column(1).search($('#Controller-status').val());
        @:    table.draw();
        @:});
@:    });
@:</script>}
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string ToCamelCase(string name)
    {
        return Char.ToLowerInvariant(name[0]) + name.Substring(1);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
