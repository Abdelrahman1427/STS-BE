<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SuccessMessage" xml:space="preserve">
    <value>Success message</value>
  </data>
  <data name="EmailExist" xml:space="preserve">
    <value>This email already exists. Try to login instead</value>
  </data>
  <data name="ExistEmail" xml:space="preserve">
    <value>This email already exists. Try to login instead</value>
  </data>
  <data name="FailedToRegister" xml:space="preserve">
    <value>Failed to register</value>
  </data>
  <data name="InvalidRegisterOrLoginType" xml:space="preserve">
    <value>Invalid register or login type</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Record Not Found</value>
  </data>
  <data name="WrongEmail" xml:space="preserve">
    <value>Wrong email</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="UserIsNotActive" xml:space="preserve">
    <value>User is not active</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="ExistUser" xml:space="preserve">
    <value>User already Exists</value>
  </data>
  <data name="FirstNameEmpty" xml:space="preserve">
    <value>First name is empty</value>
  </data>
  <data name="LastNameEmpty" xml:space="preserve">
    <value>Last name is empty</value>
  </data>
  <data name="CityEmpty" xml:space="preserve">
    <value>City is empty</value>
  </data>
  <data name="MiddleNameEmpty" xml:space="preserve">
    <value>Middle name is empty</value>
  </data>
  <data name="ResearchInstitutionEmpty" xml:space="preserve">
    <value>Research institution is empty</value>
  </data>
  <data name="ResearchSpecializationEmpty" xml:space="preserve">
    <value>Research specialization is empty</value>
  </data>
  <data name="EntrepreneurialStageEmpty" xml:space="preserve">
    <value>Entrepreneuria lstage is empty</value>
  </data>
  <data name="ExistPhoneNumber" xml:space="preserve">
    <value>Exist phone number</value>
  </data>
  <data name="CommercialNameEmpty" xml:space="preserve">
    <value>Commercial name is empty</value>
  </data>
  <data name="CompanyActivityEmpty" xml:space="preserve">
    <value>Company activity is empty</value>
  </data>
  <data name="CompanyIndustrialEmpty" xml:space="preserve">
    <value>Company industrial is empty</value>
  </data>
  <data name="ContactPersonNameEmpty" xml:space="preserve">
    <value>Contact person name is empty</value>
  </data>
  <data name="ContactPersonPhoneEmpty" xml:space="preserve">
    <value>Contact person phone is empty</value>
  </data>
  <data name="MinistryEmpty" xml:space="preserve">
    <value>Ministry is empty</value>
  </data>
  <data name="NationalityEmpty" xml:space="preserve">
    <value>National is empty</value>
  </data>
  <data name="RegisterNameEmpty" xml:space="preserve">
    <value>Register name is empty</value>
  </data>
  <data name="CropEmpty" xml:space="preserve">
    <value>Must insert one Crop at least</value>
  </data>
  <data name="LandAddressEmpty" xml:space="preserve">
    <value>Land address is empty</value>
  </data>
  <data name="LandAreaEmpty" xml:space="preserve">
    <value>Land area is empty</value>
  </data>
  <data name="CenterEmpty" xml:space="preserve">
    <value>Center is empty</value>
  </data>
  <data name="AddSuccessMessage" xml:space="preserve">
    <value>Add success </value>
  </data>
  <data name="CheckTermsConditionsEmpty" xml:space="preserve">
    <value>You must agree to the terms</value>
  </data>
  <data name="ConfirmPasswordEmpty" xml:space="preserve">
    <value>You must enter the confirm password</value>
  </data>
  <data name="ConfirmPasswordValidation" xml:space="preserve">
    <value>Confirm password doesn't match, Type again !</value>
  </data>
  <data name="EmailEmpty" xml:space="preserve">
    <value>You must enter the email</value>
  </data>
  <data name="FileEmpty" xml:space="preserve">
    <value>You must upload Files</value>
  </data>
  <data name="GenderEmpty" xml:space="preserve">
    <value>Sex is empty</value>
  </data>
  <data name="LandAddressMapEmpty" xml:space="preserve">
    <value>You must enter the location of the land on the map</value>
  </data>
  <data name="NationalIDEmpty" xml:space="preserve">
    <value>National ID is empty</value>
  </data>
  <data name="PasswordEmpty" xml:space="preserve">
    <value>You must enter the password</value>
  </data>
  <data name="PasswordValidation" xml:space="preserve">
    <value>Password must between 12 and 20 character , symbol  and number</value>
  </data>
  <data name="PhoneNumberEmpty" xml:space="preserve">
    <value>You must enter the phone number</value>
  </data>
  <data name="CommercialRegistrationNumberEmpty" xml:space="preserve">
    <value>Commercial registration number is empty</value>
  </data>
  <data name="CommercialRegistrationOfficeEmpty" xml:space="preserve">
    <value>Commercial registration office is empty</value>
  </data>
  <data name="CompanyAddressMapEmpty" xml:space="preserve">
    <value>You must enter the location of the company on the map</value>
  </data>
  <data name="AccountPending" xml:space="preserve">
    <value>Your account is still under review</value>
  </data>
  <data name="AccountRejected" xml:space="preserve">
    <value>Your account registration has been rejected</value>
  </data>
  <data name="EmailValidation" xml:space="preserve">
    <value>(Enter a valid email address for messages and notifications)</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="NotHavePermission" xml:space="preserve">
    <value>You don't have permission</value>
  </data>
  <data name="InvalidData" xml:space="preserve">
    <value>Invalid data</value>
  </data>
  <data name="ExitEmployeeIdentify" xml:space="preserve">
    <value>Please enter an employee identification number that will not be repeated</value>
  </data>
  <data name="PasswordValidationCapital" xml:space="preserve">
    <value>Your password must have at least 1 capital letter.</value>
  </data>
  <data name="PasswordValidationLength" xml:space="preserve">
    <value>Your password must have at least 12 chars no longer than 20</value>
  </data>
  <data name="PasswordValidationNumber" xml:space="preserve">
    <value>Your password must have at least 1 number.</value>
  </data>
  <data name="PasswordValidationSpecial" xml:space="preserve">
    <value>Your password must have at least 1 special char.</value>
  </data>
  <data name="RoleEmpty" xml:space="preserve">
    <value>You must select role</value>
  </data>
  <data name="CharacterOnly" xml:space="preserve">
    <value>please enter character only</value>
  </data>
  <data name="Length32" xml:space="preserve">
    <value>Length is 32 characters</value>
  </data>
  <data name="Length5" xml:space="preserve">
    <value>Length is 5 characters</value>
  </data>
  <data name="ValidDoubleNumber" xml:space="preserve">
    <value>Please enter valid double number</value>
  </data>
  <data name="ValidEmail" xml:space="preserve">
    <value>Please enter a valid e-mail address</value>
  </data>
  <data name="ValidIntNumber" xml:space="preserve">
    <value>Please enter valid integer number</value>
  </data>
  <data name="ValidPhone" xml:space="preserve">
    <value>Please enter a valid phone</value>
  </data>
  <data name="InvalidUrl" xml:space="preserve">
    <value>Please enter valid URL</value>
  </data>
  <data name="Length14" xml:space="preserve">
    <value>Length is 14 characters</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>This field is required !!!</value>
  </data>
  <data name="Length16" xml:space="preserve">
    <value>Length is 16 characters</value>
  </data>
  <data name="ValidIntOrZero" xml:space="preserve">
    <value>Please enter a value (zero is allowed)</value>
  </data>
  <data name="SubIndustrialSector" xml:space="preserve">
    <value>Sub-industrial sector</value>
  </data>
  <data name="VaildNumber" xml:space="preserve">
    <value>Please enter vaild number</value>
  </data>
  <data name="PleaseEnterValue" xml:space="preserve">
    <value>Please enter value</value>
  </data>
  <data name="ArNameEmpty" xml:space="preserve">
    <value>Ar. Name is required</value>
  </data>
  <data name="EngNameEmpty" xml:space="preserve">
    <value>Eng. Name is required</value>
  </data>
  <data name="CommercialRegisterMessageEmpty" xml:space="preserve">
    <value>Commercial register message is empty</value>
  </data>
  <data name="RegistrationFailed" xml:space="preserve">
    <value>Registration failed</value>
  </data>
  <data name="UserEmailOrMobileEmpty" xml:space="preserve">
    <value>Enter your mail or mobile to login please</value>
  </data>
  <data name="PleaseEnterAValidNumber" xml:space="preserve">
    <value>Please enter a valid number</value>
  </data>
  <data name="AuthonticationFaild" xml:space="preserve">
    <value>You not have permission </value>
  </data>
  <data name="UserEmailOrMobileValid" xml:space="preserve">
    <value>The e-mail address or password you entered was incorrect.</value>
  </data>
</root>